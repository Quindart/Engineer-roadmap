let a; // khai b√°o bi·∫øn d·∫°ng block scope
const b = 2; // khai b√°o bi·∫øn kh√¥ng thay ƒë·ªïi gi√° tr·ªã

//TODO: Arrow function l√† 1 c√°ch vi·∫øt function ng·∫Øn g·ªçn
const x = (x, y) => x * y;
//ƒê·∫∑c ƒëi·ªÉm:
//- C·∫ßn defind tr∆∞·ªõc khi s·ª≠ d·ª•ng
//- n√™n d√πng const.bi·ªÉu th·ª©c h√†m lu√¥n l√† m·ªôt gi√° tr·ªã h·∫±ng s·ªë.

//TODO: Detrucuring: ph√¢n r√£ m·∫£ng ho·∫∑c object
const person = {
  firstName: "John",
  age: 10,
};
const fruits = ["Banana", "Orange", "Apple", "Mango"];
// Destructuring Assignment
let { firstName, age } = person;
let [fruit1, fruit2] = fruits;

//TODO: The Spread (...) Operator - to√†n t·ª≠ tr·∫£i r·ªông
const q1 = ["Jan", "Feb", "Mar"];
const q2 = ["Apr", "May", "Jun"];
const q3 = ["Oct", "Nov", "May"];
const year = [...q1, ...q2, ...q3]; //=> gom 3 m·∫£ng l·∫°i 1 m·∫£ng

// TODO:  Rest Parameter
function sum(...args) {
  let sum = 0;
  for (let arg of args) sum += arg;
  return sum;
}
let rest = sum(4, 9, 16, 25, 29, 100, 66, 77);

//TODO: for of loop
let language = "JavaScript";
let text = "";
for (let x of language) {
  text += x + " ";
}

//TODO: set
const letters = new Set();
letters.add("a");
letters.add("b");
letters.add("c"); // c·∫∑p key-value
console.log("üöÄ ~ letters:", letters);

//TODO: JavaScript Classes
// Always add a method named constructor():
// class ClassName {
//     constructor() { ... }
//     method_1() { ... }
//     method_2() { ... }
//     method_3() { ... }
//   }
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}
const myCar1 = new Car("Ford", 2014);

//TODO: JavaScript Promises
// 3 tr·∫°ng th√°i c·ªßa Promise: Pending, Fulfilled, Rejected
const myPromise = new Promise(function (myResolve, myReject) {
  myResolve(); // when successful
  myReject(); // when error
});

//TODO: Symbol
// Symbol l√† m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω ƒë·ªÉ t·∫°o ra c√°c thu·ªôc t√≠nh duy nh·∫•t cho ƒë·ªëi t∆∞·ª£ng,
// gi√∫p tr√°nh xung ƒë·ªôt v√† c·∫£i thi·ªán kh·∫£ nƒÉng m·ªü r·ªông c·ªßa m√£.
const mySymbol = Symbol("mySymbol");
const obj = {
  [mySymbol]: "value",
};
console.log(obj[mySymbol]); // 'value'

//TODO: default parameters
function myFunction(x, y = 10) {
  // y = 10 n·∫øu kh√¥ng truy·ªÅn gi√° tr·ªã
  return x + y;
}
myFunction(5); // will return 15

// TODO: Entries
const fruits2 = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits2.entries();
[0, "Banana"][(1, "Orange")][(2, "Apple")][(3, "Mango")];
// n√≥ s·∫Ω tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng Iterator cho c√°c c·∫∑p [index, value] c·ªßa m·∫£ng
// ƒêi·ªÅu n√†y c√≥ nghƒ©a l√† b·∫°n c√≥ th·ªÉ l·∫∑p qua c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng c√πng v·ªõi
// ch·ªâ s·ªë c·ªßa ch√∫ng.

//TODO: find() method tr·∫£ v·ªÅ gi√° tr·ªã ƒë·∫ßu ti√™n c·ªßa m·∫£ng th·ªèa ƒëi·ªÅu ki·ªán
const numbers = [4, 9, 16, 25, 29];
let first = numbers.find(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}

//TODO: Number object:
EPSILON;
MIN_SAFE_INTEGER;
MAX_SAFE_INTEGER;
Number.isInteger(10); // returns true

//TODO: Math
Math.trunc(); // l√†m tr√≤n l√™n 4.5 => 4
Math.sign(); // tr·∫£ v·ªÅ s·ªë √¢m or d∆∞∆°ng or null
Math.cbrt(); // cƒÉn b·∫≠c 3 c·ªßa x
Math.log2(); // logarit c∆° s·ªë 2
Math.log10(); // logarit c∆° s·ªë 10

//TODO: Modules
//Cach1: Import from named exports
import { name, age } from "./person.js";

//Cach2 Import from default exports
import message from "./message.js";
